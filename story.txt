import java.util.ArrayList;
import java.util.List;

public class Country {
  private String name;
  private List<DayNode> days;

  public Country(String name) {
    this.name = name;
    days = new ArrayList<DayNode>();
  }

  private class DayNode {
    private String date;
    private int numCases;

    DayNode(String date, int numCases) {
      this.date = date;
      this.numCases = numCases;
    }
  }

  public void addDay(DayNode day) throws NullPointerException, IllegalArgumentException {
    int addIndex = days.size();
    if (day == null) {
      throw new NullPointerException("day is invalid");
    }
    
    if (days.size() == 0) {
      days.add(day);
    } else {
      for (int i = 0; i < days.size(); ++i) {
        if (daysComparator(day, days.get(i)) == 0) {
          throw new IllegalArgumentException("Days cannot be repeated");
        } else if (daysComparator(day, days.get(i)) < 0) {
          addIndex = i;
          break;
        } else {
          continue;
        }
      }
      days.add(addIndex, day);
    }  
  }

  private int daysComparator(DayNode day1, DayNode day2)
      throws IllegalArgumentException {
    String[] day1Details = day1.date.split("/");
    String[] day2Details = day2.date.split("/");

    if (day1Details.length != 3 || day2Details.length != 3) {
      throw new IllegalArgumentException("Days cannot be compared");
    }

    String temp1 = day1Details[0];
    day1Details[0] = day1Details[1];
    day1Details[1] = temp1;
    
    String temp2 = day2Details[0];
    day2Details[0] = day2Details[1];
    day2Details[1] = temp2;

    for (int i = 2; i > -1; --i) {
      if (Integer.parseInt(day1Details[i].trim()) == Integer
          .parseInt(day2Details[i].trim())) {
        continue;
      } else if (Integer.parseInt(day1Details[i].trim()) < Integer
          .parseInt(day2Details[i].trim())) {
        return -1;
      } else if (Integer.parseInt(day1Details[i].trim()) > Integer
          .parseInt(day2Details[i].trim())) {
        return 1;
      }
    }
    
    return 0;
  }

  public void removeDay(DayNode day) {
    if (day == null) {
      throw new NullPointerException("day is invalid");
    }

    days.remove(day);
  }

  public List<DayNode> getDays() {
    return days;
  }
 }

